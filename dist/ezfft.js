var e={d:(r,t)=>{for(var a in t)e.o(t,a)&&!e.o(r,a)&&Object.defineProperty(r,a,{enumerable:!0,get:t[a]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};function t(e,r,t=[],a=.001){let f={time:{realPart:e,imagPart:t,time:[]},frequency:{realPart:[],imagPart:[],amplitude:[],phase:[],frequency:[]},fs:r,samplingTime:0};if(0==f.fs)throw"Sample frequency cannot be zero.";f.samplingTime=f.time.realPart.length/r;for(let e=0;e<f.time.realPart.length;e++)f.time.time[e]=e/r;f.time.imagPart.length!=f.time.realPart.length&&(f.time.imagPart=u(f.time.realPart.length));let i=f.time.realPart.map((function(e){return e})),l=f.time.imagPart.map((function(e){return e}));[f.frequency.realPart,f.frequency.imagPart]=n(i,l);for(let e=0;e<f.frequency.realPart.length;e++)f.frequency.amplitude[e]=Math.sqrt(Math.pow(f.frequency.realPart[e],2)+Math.pow(f.frequency.imagPart[e],2))/(f.frequency.realPart.length/2),f.frequency.phase[e]=Math.atan2(f.frequency.imagPart[e],f.frequency.realPart[e]),f.frequency.frequency[e]=e/f.samplingTime,f.frequency.amplitude[e]<a&&(f.frequency.amplitude[e]=0,f.frequency.phase[e]=0);let c=f.frequency.amplitude.slice(f.frequency.amplitude.length/2,f.frequency.amplitude.length);return c.reverse().forEach((function(e){f.frequency.amplitude.unshift(e),f.frequency.amplitude.pop()})),c=f.frequency.phase.slice(f.frequency.phase.length/2,f.frequency.phase.length),c.reverse().forEach((function(e){f.frequency.phase.unshift(e),f.frequency.phase.pop()})),c=f.frequency.frequency.slice(f.frequency.frequency.length/2,f.frequency.frequency.length),c.forEach((function(e){f.frequency.frequency.unshift(-(e-(r-1)/2)),f.frequency.frequency.pop()})),f.samplingTime-=1/r,f}function a(e,r,t=[],a=[],n=[],i=.001){let l={time:{realPart:[],imagPart:[],time:[]},frequency:{realPart:[],imagPart:[],amplitude:e,phase:[],frequency:r},fs:0,samplingTime:0};l.samplingTime=1/Math.abs(r[1]-r[0]),l.fs=2*r.map(Math.abs).reduce((function(e,r){return Math.max(e,r)}));for(let e=0;e<l.samplingTime*l.fs;e++)l.time.time[e]=e/l.fs;if(0==t.length?l.frequency.phase=u(e.length):l.frequency.phase=t,0==a.length&&0==n.length)for(let e=0;e<l.frequency.amplitude.length;e++)l.frequency.realPart[e]=l.frequency.amplitude[e]*l.frequency.amplitude.length/(2*Math.sqrt(1+Math.pow(Math.tan(l.frequency.phase[e]),2))),l.frequency.imagPart[e]=l.frequency.realPart[e]*Math.tan(l.frequency.phase[e]);else l.frequency.realPart=a.map((function(e){return e})),l.frequency.imagPart=n.map((function(e){return e}));let c=l.frequency.realPart.map((function(e){return e})),h=l.frequency.imagPart.map((function(e){return e}));[l.time.imagPart,l.time.realPart]=f(c,h);for(let e=0;e<l.time.imagPart.length;e++)l.time.imagPart[e]<i&&(l.time.imagPart[e]=0);return l}function n(e,r){var t=e.length;if(t!=r.length)throw"Mismatched lengths";return 0==t?[]:0==(t&t-1)?function(e,r){var t=e.length;if(t!=r.length)throw"Mismatched lengths";if(1==t)return[];for(var a=-1,n=0;n<32;n++)1<<n==t&&(a=n);if(-1==a)throw"Length is not a power of 2";var f=new Array(t/2),u=new Array(t/2);for(n=0;n<t/2;n++)f[n]=Math.cos(2*Math.PI*n/t),u[n]=Math.sin(2*Math.PI*n/t);for(n=0;n<t;n++)if((o=i(n,a))>n){var l=e[n];e[n]=e[o],e[o]=l,l=r[n],r[n]=r[o],r[o]=l}for(var c=2;c<=t;c*=2){var h=c/2,m=t/c;for(n=0;n<t;n+=c)for(var o=n,y=0;o<n+h;o++,y+=m){var g=o+h,p=e[g]*f[y]+r[g]*u[y],s=-e[g]*u[y]+r[g]*f[y];e[g]=e[o]-p,r[g]=r[o]-s,e[o]+=p,r[o]+=s}}return[e,r]}(e,r):function(e,r){var t=e.length;if(t!=r.length)throw"Mismatched lengths";for(var a=1;a<2*t+1;)a*=2;for(var i=new Array(t),l=new Array(t),c=0;c<t;c++){var h=c*c%(2*t);i[c]=Math.cos(Math.PI*h/t),l[c]=Math.sin(Math.PI*h/t)}var m=u(a),o=u(a);for(c=0;c<t;c++)m[c]=e[c]*i[c]+r[c]*l[c],o[c]=-e[c]*l[c]+r[c]*i[c];var y=u(a),g=u(a);for(y[0]=i[0],g[0]=l[0],c=1;c<t;c++)y[c]=y[a-c]=i[c],g[c]=g[a-c]=l[c];var p=new Array(a),s=new Array(a);for(function(e,r,t,a,i,u){var l=e.length;if(l!=r.length||l!=t.length||l!=a.length||l!=i.length||l!=u.length)throw"Mismatched lengths";e=e.slice(),r=r.slice(),t=t.slice(),a=a.slice(),n(e,r),n(t,a);for(var c=0;c<l;c++){var h=e[c]*t[c]-r[c]*a[c];r[c]=r[c]*t[c]+e[c]*a[c],e[c]=h}for(f(e,r),c=0;c<l;c++)i[c]=e[c]/l,u[c]=r[c]/l}(m,o,y,g,p,s),c=0;c<t;c++)e[c]=p[c]*i[c]+s[c]*l[c],r[c]=-p[c]*l[c]+s[c]*i[c];return[e,r]}(e,r)}function f(e,r){return n(r,e)}function i(e,r){for(var t=0,a=0;a<r;a++)t=t<<1|1&e,e>>>=1;return t}function u(e){for(var r=[],t=0;t<e;t++)r.push(0);return r}e.r(r),e.d(r,{fft:()=>t,ifft:()=>a}),module.exports=r;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,