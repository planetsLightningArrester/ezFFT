var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{fft:()=>i,fftData:()=>a,fftDataFrequency:()=>n,fftDataTime:()=>r,ifft:()=>f});class r{constructor(e,t){this.real=e,this.realPart=e,this.imag=t,this.imagPart=t,this.time=[]}}class n{constructor(e,t){this.real=e,this.realPart=e,this.imag=t,this.imagPart=t,this.amplitude=[],this.phase=[],this.frequency=[]}}class a{constructor(e,t,a){this.time=new r(e,t),this.frequency=new n([],[]),this.fs=a,this.samplingTime=0}}function i(e,t,r=[],n=.001){const i=new a(e,r,t);if(0==i.fs)throw"Sample frequency cannot be zero.";i.samplingTime=i.time.realPart.length/t;for(let e=0;e<i.time.realPart.length;e++)i.time.time[e]=e/t;i.time.imagPart.length!=i.time.realPart.length&&(i.time.imagPart=o(i.time.realPart.length));const f=i.time.realPart.map((function(e){return e})),c=i.time.imagPart.map((function(e){return e}));[i.frequency.realPart,i.frequency.imagPart]=l(f,c);for(let e=0;e<i.frequency.realPart.length;e++)i.frequency.amplitude[e]=Math.sqrt(Math.pow(i.frequency.realPart[e],2)+Math.pow(i.frequency.imagPart[e],2))/(i.frequency.realPart.length/2),i.frequency.phase[e]=Math.atan2(i.frequency.imagPart[e],i.frequency.realPart[e]),i.frequency.frequency[e]=e/i.samplingTime,i.frequency.amplitude[e]<n&&(i.frequency.amplitude[e]=0,i.frequency.phase[e]=0);let u=i.frequency.amplitude.slice(i.frequency.amplitude.length/2,i.frequency.amplitude.length);return u.reverse().forEach((function(e){i.frequency.amplitude.unshift(e),i.frequency.amplitude.pop()})),u=i.frequency.phase.slice(i.frequency.phase.length/2,i.frequency.phase.length),u.reverse().forEach((function(e){i.frequency.phase.unshift(e),i.frequency.phase.pop()})),u=i.frequency.frequency.slice(i.frequency.frequency.length/2,i.frequency.frequency.length),u.forEach((function(e){i.frequency.frequency.unshift(-(e-(t-1)/2)),i.frequency.frequency.pop()})),i.samplingTime-=1/t,i.time.real=i.time.realPart,i.time.imag=i.time.imagPart,i.frequency.real=i.frequency.realPart,i.frequency.imag=i.frequency.imagPart,i}function f(e,t,r=[],n=[],a=[],i=.001){const f={time:{real:[],realPart:[],imag:[],imagPart:[],time:[]},frequency:{real:[],realPart:[],imag:[],imagPart:[],amplitude:e,phase:[],frequency:t},fs:0,samplingTime:0};f.samplingTime=1/Math.abs(t[1]-t[0]),f.fs=2*t.map(Math.abs).reduce((function(e,t){return Math.max(e,t)}));for(let e=0;e<f.samplingTime*f.fs;e++)f.time.time[e]=e/f.fs;if(0==r.length?f.frequency.phase=o(e.length):f.frequency.phase=r,0==n.length&&0==a.length)for(let e=0;e<f.frequency.amplitude.length;e++)f.frequency.realPart[e]=f.frequency.amplitude[e]*f.frequency.amplitude.length/(2*Math.sqrt(1+Math.pow(Math.tan(f.frequency.phase[e]),2))),f.frequency.imagPart[e]=f.frequency.realPart[e]*Math.tan(f.frequency.phase[e]);else f.frequency.realPart=n.map((function(e){return e})),f.frequency.imagPart=a.map((function(e){return e}));const l=f.frequency.realPart.map((function(e){return e})),u=f.frequency.imagPart.map((function(e){return e}));[f.time.imagPart,f.time.realPart]=c(l,u);for(let e=0;e<f.time.imagPart.length;e++)f.time.imagPart[e]<i&&(f.time.imagPart[e]=0);return f.time.real=f.time.realPart,f.time.imag=f.time.imagPart,f.frequency.real=f.frequency.realPart,f.frequency.imag=f.frequency.imagPart,f}function l(e,t){const r=e.length;if(r!=t.length)throw"Mismatched lengths";return 0==r?[]:0==(r&r-1)?function(e,t){const r=e.length;if(r!=t.length)throw"Mismatched lengths";if(1==r)return[];let n=-1;for(let e=0;e<32;e++)1<<e==r&&(n=e);if(-1==n)throw"Length is not a power of 2";const a=new Array(r/2),i=new Array(r/2);for(let e=0;e<r/2;e++)a[e]=Math.cos(2*Math.PI*e/r),i[e]=Math.sin(2*Math.PI*e/r);for(let a=0;a<r;a++){const r=u(a,n);if(r>a){let n=e[a];e[a]=e[r],e[r]=n,n=t[a],t[a]=t[r],t[r]=n}}for(let n=2;n<=r;n*=2){const f=n/2,l=r/n;for(let c=0;c<r;c+=n)for(let r=c,n=0;r<c+f;r++,n+=l){const l=r+f,c=e[l]*a[n]+t[l]*i[n],u=-e[l]*i[n]+t[l]*a[n];e[l]=e[r]-c,t[l]=t[r]-u,e[r]+=c,t[r]+=u}}return[e,t]}(e,t):function(e,t){const r=e.length;if(r!=t.length)throw"Mismatched lengths";let n=1;for(;n<2*r+1;)n*=2;const a=new Array(r),i=new Array(r);for(let e=0;e<r;e++){const t=e*e%(2*r);a[e]=Math.cos(Math.PI*t/r),i[e]=Math.sin(Math.PI*t/r)}const f=o(n),u=o(n);for(let n=0;n<r;n++)f[n]=e[n]*a[n]+t[n]*i[n],u[n]=-e[n]*i[n]+t[n]*a[n];const m=o(n),s=o(n);m[0]=a[0],s[0]=i[0];for(let e=1;e<r;e++)m[e]=m[n-e]=a[e],s[e]=s[n-e]=i[e];const h=new Array(n),g=new Array(n);!function(e,t,r,n,a,i){const f=e.length;if(f!=t.length||f!=r.length||f!=n.length||f!=a.length||f!=i.length)throw"Mismatched lengths";e=e.slice(),t=t.slice(),r=r.slice(),n=n.slice(),l(e,t),l(r,n);for(let a=0;a<f;a++){const i=e[a]*r[a]-t[a]*n[a];t[a]=t[a]*r[a]+e[a]*n[a],e[a]=i}c(e,t);for(let r=0;r<f;r++)a[r]=e[r]/f,i[r]=t[r]/f}(f,u,m,s,h,g);for(let n=0;n<r;n++)e[n]=h[n]*a[n]+g[n]*i[n],t[n]=-h[n]*i[n]+g[n]*a[n];return[e,t]}(e,t)}function c(e,t){return l(t,e)}function u(e,t){let r=0;for(let n=0;n<t;n++)r=r<<1|1&e,e>>>=1;return r}function o(e){const t=[];for(let r=0;r<e;r++)t.push(0);return t}module.exports=t;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,